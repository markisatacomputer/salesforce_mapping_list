<?php

/**
 * @file
 * Manages Salesforce object and Drupal entity mappings.
 */

/**
 * Access callback for managing salesforce mappings.
 *
 * @return bool
 */
function salesforce_mapping_list_access() {
  if (user_access('administer salesforce mapping list')) {
    $sfapi = salesforce_get_api();
    return $sfapi->isAuthorized();
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function salesforce_mapping_list_permission() {
  return array(
    'administer salesforce mapping list' => array(
      'title' => t('Administer salesforce list mapping'),
      'description' => t('Administer Salesforce List field maps.'),
      'restrict access' => TRUE,
    ),
    'view salesforce mapping list' => array(
      'title' => t('View salesforce list mapping'),
      'description' => t('View Salesforce List mapping data.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_install().
 */
function salesforce_mapping_list_install() {
  // An attempt to keep this info cached.  It's quite process intensive.
  salesforce_mapping_list_valid_objects();
}

/**
 * Implements hook_cron().
 */
function salesforce_mapping_list_cron() {
  // An attempt to keep this info cached.  It's quite process intensive.
  salesforce_mapping_list_valid_objects();

  // Queue one list at a time, starting with new ones
  if ($new = salesforce_mapping_list_unsynced()) {
    $list = array_pop($new);
  } else if ($update=salesforce_mapping_list_need_sync()) {
    $list = array_pop($update);
  }
  if (isset($list)) {
    $sfapi = salesforce_get_api();

    // Get the list from salesforce
    $object = $sfapi->objectDescribe($list->salesforce_object_type);
    $fields = $object['fields'];
    while(!isset($list_field)) {
      $field = array_pop($fields);
      if ($field['name'] == $list->salesforce_object_field) {
        // Process list values
        $list_field = array();
        foreach ($field['picklistValues'] as $value) {
          // Skip empty strings
          if (!empty($value['label'])) {
            $list_field[$value['label']] = $value['label'];
          }
        }
      }
    }

    // Get existing list items and check to see any need to be deleted.
    if (isset($list_field)) {
      if ($list_items = $list->get_items()) {
        foreach ($list_items as $key => $item) {
          if ($name = $list_item->entity_property()) {
            // If an existing entity is no longer in the list, it needs to go.
            if (!isset($list_field[$name])) {
              $item->delete();
              unset($list_items[$key]);
            // All other existing entities don't need to be processed.
            } else {
              unset($list_field[$name]);
            }
            // What remains in $list_field should be new items.
          } 
        }
      }
    
      // Only continue if there are new items left
      if (isset($list_field) && !empty($list_field)) {
        // Create the list queue items.
        $queue = DrupalQueue::get('salesforce_mapping_list');
        $queue->createQueue();
        foreach ($list_field as $list_item) {
          $queue->createItem(array(
            'id' => $list->salesforce_mapping_list_id,
            'item' => $list_item,
            'entity_type' => $list->drupal_entity_type,
            'bundle' => $list->drupal_bundle,
            'property' => $list->mapped_property,
          ));
        }
      }
      // Lastly, update the last_sync time for this salesforce_mapping_list.
      $list->last_sync = REQUEST_TIME;
      $list->save();
    }
  }
}

/**
 * Implements hook_queue_cron_info().
 */
function salesforce_mapping_list_cron_queue_info() {
  $queues['salesforce_mapping_list'] = array(
    'worker callback' => 'salesforce_mapping_list_create_item',
    'time' => 30,
  );
 
  return $queues;
}

/**
 * Callback for salesforce_mapping_list_queue_cron_info().
 */
function salesforce_mapping_list_create_item($data){
  module_load_include("inc","salesforce_mapping_list","includes/salesforce_mapping_list_item.entity");
  // Create new salesforce_mapping_list_item
  $list_item = new SalesforceMappingListItem;
  $list_item->salesforce_mapping_list_id = $data['id'];
  $list_item->drupal_entity_type = $data['entity_type'];
  $list_item->drupal_bundle = $data['bundle'];
  $list_item->mapped_property = $data['property'];
  if ($entity_id = $list_item->create_entity($data['item'])) {
    $list_item->entity_id = $entity_id;
    $list_item->is_new = TRUE;
    $list_item->save();
    watchdog('salesforce_mapping_list','Created :entity_type entity id :id associated with salesforce_mapping_list :list_id and salesforce_mapping_list_item :list_item_id', array(':entity_type' => $list_item->drupal_entity_type, ':id' =>  $entity_id, ':list_id' => $data['id']));
  }
}

/**
 * Implements hook_entity_info().
 */
function salesforce_mapping_list_entity_info() {
  $return = array(
    'salesforce_mapping_list' => array(
      'label' => t('Salesforce List Mapping'),
      'controller class' => 'EntityAPIControllerExportable',
      'entity class' => 'SalesforceMappingList',
      'base table' => 'salesforce_mapping_list',
      'uri callback' => 'entity_class_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'salesforce_mapping_list',
      'entity keys' => array(
        'id' => 'salesforce_mapping_list_id',
        'name' => 'name',
        'label' => 'label'
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'salesforce_mapping_list' => array(
          'label' => 'Salesforce List Mapping',
        ),
      ),
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/salesforce/list_mappings',
        'file' => 'salesforce_mapping_list.admin.inc',
        'file path' => drupal_get_path('module', 'salesforce_mapping_list') . '/includes',
        'controller class' => 'SalesforceMappingListUIController',
      ),
      'access callback' => 'salesforce_mapping_list_access',
      'label callback' => 'entity_class_label',
    ),
    'salesforce_mapping_list_item' => array(
      'label' => t('Salesforce List Mapping Item'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'SalesforceMappingListItem',
      'base table' => 'salesforce_mapping_list_item',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'module' => 'salesforce_mapping_list',
      'entity keys' => array(
        'id' => 'salesforce_mapping_list_item_id',
      ),
    )
  );

  return $return;
}

/**
 * Loads a single salesforce_mapping_list or all of them if no name provided.
 *
 * @param null $name
 *
 * @return array
 */
function salesforce_mapping_list_load($name = NULL) {
  $types = entity_load_multiple_by_name('salesforce_mapping_list', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 *  Return array of salesforce objects with picklists.
 */
function salesforce_mapping_list_valid_objects() {
  $objects = cache_get('salesforce_mapping_list_valid_objects');
  if ($objects) {
    return $objects->data;
  } else {
    $sfapi = salesforce_get_api();
    $objects = $sfapi->objects();
    $valid_objects = array();
    foreach ($objects as $object) {
      $fields = $sfapi->objectDescribe($object['name']);
      foreach ($fields['fields'] as $field) {
        if ($field['type'] == 'picklist' || $field['type'] == 'multipicklist') {
          $object_name = $object['name'];
          if (!isset($valid_objects[$object_name])) {
            $valid_objects[$object_name]['label'] = $object['label'];
          }
          $valid_objects[$object_name]['fields'][$field['name']] = $field['label'];
        }
      }
    }
    cache_set('salesforce_mapping_list_valid_objects',$valid_objects);
    return $valid_objects;
  }
}

/**
 *  Return array of salesforce_mapping_list entities that have never synced.
 */
function salesforce_mapping_list_unsynced() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'salesforce_mapping_list')
      ->propertyCondition('last_sync', 0);
  $results = $query->execute();
  if (!empty($results) && !empty($results['salesforce_mapping_list'])) {
    return entity_load('salesforce_mapping_list', array_keys($results['salesforce_mapping_list']));
  } else {
    return FALSE;
  }
}

/**
 *  Return array of salesforce_mapping_list entities that have never synced.
 */
function salesforce_mapping_list_need_sync() {
  $results = db_query('SELECT l.salesforce_mapping_list_id FROM {salesforce_mapping_list} l WHERE (:timestamp-l.last_sync) > l.update_period AND l.last_sync > 0', array(':timestamp' => REQUEST_TIME));
  $results = $results->fetchAllAssoc('salesforce_mapping_list_id');
  
  if (!empty($results)) {
    return entity_load('salesforce_mapping_list', array_keys($results));
  } else {
    return FALSE;
  }
}
